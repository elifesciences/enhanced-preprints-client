@use "sass:list";
@use "settings";
@use "typography";

@mixin grid() {
  @supports (display: grid) {
    display: grid;
    grid-column-gap: var(--grid-gutter);
    grid-template-columns: repeat(12, 1fr);
  }
}

@mixin padding($size_in_px, $dimension: "") {
  @if $dimension == top or $dimension == right or $dimension == bottom or $dimension == left {
    padding-#{$dimension}: calc(($size_in_px / var(--base-font-size)) * 1rem);
  } @else if $dimension == "" and type_of($size_in_px) == list {
    $parts-px: ();
    $parts-rem: ();

    @each $size in $size_in_px {
      $parts-px: list.append($parts-px, #{$size}px, "space");
    }

    @each $size in $size_in_px {
      $parts-rem: list.append($parts-rem, #{typography.get-rem-from-px($size)}rem, "space");
    }

    padding: $parts-px;
    padding: $parts-rem;
  } @else {
    padding: calc(($size_in_px / var(--base-font-size)) * 1rem);
  }
}

@mixin margin($size_in_px, $dimension: "") {
  @if $dimension == top or $dimension == right or $dimension == bottom or $dimension == left {
    margin-#{$dimension}: calc(($size_in_px / var(--base-font-size)) * 1rem);
  } @else if $dimension == "" and type_of($size_in_px) == list {
    $parts-px: ();
    $parts-rem: ();

    @each $size in $size_in_px {
      $parts-px: list.append($parts-px, #{$size}px, "space");
    }

    @each $size in $size_in_px {
      $parts-rem: list.append($parts-rem, #{typography.get-rem-from-px($size)}rem, "space");
    }

    margin: $parts-px;
    margin: $parts-rem;
  } @else {
    margin: calc(($size_in_px / var(--base-font-size)) * 1rem);
  }
}

@mixin wrapper($padding: true) {
  box-sizing: content-box;
  margin: auto;

  @include constrain-width(settings.$max-site-width, "max");

  @if $padding {
    padding-left: var(--site-spacing);
    padding-right: var(--site-spacing);

    @media only screen and (min-width: settings.$breakpoint-small) {
      padding-left: var(--site-spacing-large);
      padding-right: var(--site-spacing-large);
    }
  }
}

@mixin constrain-width($size_in_px, $extreme) {
  @if $extreme == min or $extreme == max {
    #{$extreme}-width: #{$size_in_px};
    #{$extreme}-width: #{typography.get-rem-from-px($size_in_px)}rem;
  }
}

@mixin height($size_in_px) {
  height: #{$size_in_px}px;
  height: #{typography.get-rem-from-px($size_in_px)}rem;
}

@mixin visuallyhidden() {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  user-select: none;
  width: 1px;
}

@mixin visuallyunhidden() {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: auto;
  position: static;
  width: auto;
}

@mixin z-index($value) {
  z-index: ($value * 10);
}
