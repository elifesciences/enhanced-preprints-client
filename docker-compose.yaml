version: '3.4'
services:
  # Dependant services
  ## Image Server
  image-server:
    image: ghcr.io/elifesciences/epp-image-server:master-a34dfaa2-20231003.1350
    environment:
      - SOURCE_STATIC=S3Source
      - S3SOURCE_ENDPOINT=http://minio:9000/
      - S3SOURCE_ACCESS_KEY_ID=minio
      - S3SOURCE_SECRET_KEY=miniotest
      - S3SOURCE_BASICLOOKUPSTRATEGY_PATH_PREFIX=data/
      - S3SOURCE_BASICLOOKUPSTRATEGY_BUCKET_NAME=eppdata
    ports:
      - "8182:8182"
    volumes:
      - ./data:/opt/epp/data
    healthcheck:
      test: curl http://image-server:8182/
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 2s

  ## Database (MongoDB) server
  mongodb:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: testtest
    volumes:
      - data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/test -u admin -p testtest --authenticationDatabase admin --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 2s

  ## Database (MongoDB) GUI
  mongo-express:
    image: mongo-express
    environment:
      - ME_CONFIG_OPTIONS_EDITORTHEME=dracula
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_USERNAME=admin
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=testtest
    depends_on:
      mongodb:
        condition: service_healthy
    ports:
      - "8081:8081"

  ## Minio
  minio:
    image: minio/minio:RELEASE.2023-01-02T09-40-09Z
    healthcheck:
      test: curl http://minio:9000/minio/health/live
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 2s
    ports:
      - "9100:9000"
      - "9101:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniotest
    command: server --console-address ":9001" /data

  # Create bucket and upload data
  createbucket:
    image: minio/mc:RELEASE.2022-12-24T15-21-38Z
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 minio miniotest;
      /usr/bin/mc mb myminio/eppdata || true;
      /usr/bin/mc mirror /data myminio/eppdata/data;
      # Set to public to host local PDFs
      /usr/bin/mc anonymous set public myminio/eppdata;
      exit 0;
      "
    volumes:
      - ./data/data:/data

  ## EPP API
  api:
    image: ghcr.io/elifesciences/enhanced-preprints:master-598474ad-20231119.0349
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'apk add curl; curl http://api:3000/'"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 2s
    depends_on:
      mongodb:
        condition: service_healthy
      image-server:
        condition: service_healthy
    environment:
      REPO_TYPE: MongoDB
      REPO_CONNECTION: mongodb:27017
      REPO_USERNAME: admin
      REPO_PASSWORD: testtest
      S3_ENDPOINT: 'http://minio:9000'
      S3_ACCESS_KEY: minio
      S3_SECRET_KEY: miniotest
      S3_BUCKET: eppdata
    ports:
      - 3000:3000

  ## Main app server
  yarn:
    build:
      context: .
      target: dev
    command: yarn
    volumes:
      - ./:/opt/epp-client/
      - node_modules:/opt/epp-client/node_modules
  app:
    build:
      context: .
      target: dev
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'apk add curl; curl -X POST http://app:3000/'"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 2s
    environment:
      API_SERVER: ${API_SERVER:-http://api:3000}
      NEXT_PUBLIC_IMAGE_SERVER: /iiif
      MANUSCRIPT_CONFIG_FILE: ${MANUSCRIPT_CONFIG_FILE:-/opt/epp-client/data/manuscripts.json}
    depends_on:
      yarn:
        condition: service_completed_successfully
      start-import:
        condition: service_completed_successfully

    ports:
      - 3001:3000
      - 9229:9229
    volumes:
      - ./:/opt/epp-client/
      - node_modules:/opt/epp-client/node_modules

  # Storybook server
  storybook:
    build:
      context: .
      target: storybook
    depends_on:
      yarn:
        condition: service_completed_successfully
    ports:
      - "6006:6006"
    volumes:
      - ./:/opt/epp-client/
      - node_modules:/opt/epp-client/node_modules

  # Expose API and client via proxy
  nginx:
    image: nginx:latest
    depends_on:
      api:
        condition: service_healthy
      app:
        condition: service_healthy
    ports:
      - 8080:80
    volumes:
      - ./.docker/nginx.conf:/etc/nginx/conf.d/default.conf

  # Start import when api and app are available
  start-import:
    image: curlimages/curl
    depends_on:
      api:
        condition: service_healthy
      createbucket:
        condition: service_completed_successfully
    command: curl -X POST http://api:3000/import

volumes:
  data:
  node_modules:
  minio_storage:
